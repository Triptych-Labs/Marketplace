// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitTreasury is the `initTreasury` instruction.
type InitTreasury struct {
	Adornment *string

	// [0] = [WRITE] treasuryAuthority
	//
	// [1] = [WRITE] treasuryTokenAccount
	//
	// [2] = [WRITE] treasuryTokenMint
	//
	// [3] = [WRITE, SIGNER] oracle
	//
	// [4] = [WRITE] oracleTokenAccount
	//
	// [5] = [] systemProgram
	//
	// [6] = [] tokenProgram
	//
	// [7] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitTreasuryInstructionBuilder creates a new `InitTreasury` instruction builder.
func NewInitTreasuryInstructionBuilder() *InitTreasury {
	nd := &InitTreasury{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetAdornment sets the "adornment" parameter.
func (inst *InitTreasury) SetAdornment(adornment string) *InitTreasury {
	inst.Adornment = &adornment
	return inst
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *InitTreasury) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *InitTreasury) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTreasuryTokenAccountAccount sets the "treasuryTokenAccount" account.
func (inst *InitTreasury) SetTreasuryTokenAccountAccount(treasuryTokenAccount ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(treasuryTokenAccount).WRITE()
	return inst
}

// GetTreasuryTokenAccountAccount gets the "treasuryTokenAccount" account.
func (inst *InitTreasury) GetTreasuryTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTreasuryTokenMintAccount sets the "treasuryTokenMint" account.
func (inst *InitTreasury) SetTreasuryTokenMintAccount(treasuryTokenMint ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(treasuryTokenMint).WRITE()
	return inst
}

// GetTreasuryTokenMintAccount gets the "treasuryTokenMint" account.
func (inst *InitTreasury) GetTreasuryTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitTreasury) SetOracleAccount(oracle ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitTreasury) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOracleTokenAccountAccount sets the "oracleTokenAccount" account.
func (inst *InitTreasury) SetOracleTokenAccountAccount(oracleTokenAccount ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(oracleTokenAccount).WRITE()
	return inst
}

// GetOracleTokenAccountAccount gets the "oracleTokenAccount" account.
func (inst *InitTreasury) GetOracleTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitTreasury) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitTreasury) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *InitTreasury) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *InitTreasury) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetRentAccount sets the "rent" account.
func (inst *InitTreasury) SetRentAccount(rent ag_solanago.PublicKey) *InitTreasury {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *InitTreasury) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst InitTreasury) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitTreasury,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitTreasury) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitTreasury) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Adornment == nil {
			return errors.New("Adornment parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TreasuryTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TreasuryTokenMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OracleTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *InitTreasury) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitTreasury")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Adornment", *inst.Adornment))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("    treasuryToken", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("treasuryTokenMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      oracleToken", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("             rent", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj InitTreasury) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Adornment` param:
	err = encoder.Encode(obj.Adornment)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitTreasury) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Adornment`:
	err = decoder.Decode(&obj.Adornment)
	if err != nil {
		return err
	}
	return nil
}

// NewInitTreasuryInstruction declares a new InitTreasury instruction with the provided parameters and accounts.
func NewInitTreasuryInstruction(
	// Parameters:
	adornment string,
	// Accounts:
	treasuryAuthority ag_solanago.PublicKey,
	treasuryTokenAccount ag_solanago.PublicKey,
	treasuryTokenMint ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	oracleTokenAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *InitTreasury {
	return NewInitTreasuryInstructionBuilder().
		SetAdornment(adornment).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetTreasuryTokenAccountAccount(treasuryTokenAccount).
		SetTreasuryTokenMintAccount(treasuryTokenMint).
		SetOracleAccount(oracle).
		SetOracleTokenAccountAccount(oracleTokenAccount).
		SetSystemProgramAccount(systemProgram).
		SetTokenProgramAccount(tokenProgram).
		SetRentAccount(rent)
}
