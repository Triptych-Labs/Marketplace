// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EnableVias is the `enableVias` instruction.
type EnableVias struct {

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] vias
	//
	// [2] = [WRITE] treasuryAuthority
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEnableViasInstructionBuilder creates a new `EnableVias` instruction builder.
func NewEnableViasInstructionBuilder() *EnableVias {
	nd := &EnableVias{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetOracleAccount sets the "oracle" account.
func (inst *EnableVias) SetOracleAccount(oracle ag_solanago.PublicKey) *EnableVias {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *EnableVias) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetViasAccount sets the "vias" account.
func (inst *EnableVias) SetViasAccount(vias ag_solanago.PublicKey) *EnableVias {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(vias).WRITE()
	return inst
}

// GetViasAccount gets the "vias" account.
func (inst *EnableVias) GetViasAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *EnableVias) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *EnableVias {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *EnableVias) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *EnableVias) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *EnableVias {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *EnableVias) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst EnableVias) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EnableVias,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EnableVias) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EnableVias) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Vias is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *EnableVias) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EnableVias")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             vias", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj EnableVias) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *EnableVias) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewEnableViasInstruction declares a new EnableVias instruction with the provided parameters and accounts.
func NewEnableViasInstruction(
	// Accounts:
	oracle ag_solanago.PublicKey,
	vias ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *EnableVias {
	return NewEnableViasInstructionBuilder().
		SetOracleAccount(oracle).
		SetViasAccount(vias).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetSystemProgramAccount(systemProgram)
}
