// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// EnableViaRarityTokenMinting is the `enableViaRarityTokenMinting` instruction.
type EnableViaRarityTokenMinting struct {
	Rarity *string

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] rarityTokenMint
	//
	// [2] = [WRITE] treasuryAuthority
	//
	// [3] = [WRITE] viaMapping
	//
	// [4] = [WRITE] via
	//
	// [5] = [WRITE] vias
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewEnableViaRarityTokenMintingInstructionBuilder creates a new `EnableViaRarityTokenMinting` instruction builder.
func NewEnableViaRarityTokenMintingInstructionBuilder() *EnableViaRarityTokenMinting {
	nd := &EnableViaRarityTokenMinting{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetRarity sets the "rarity" parameter.
func (inst *EnableViaRarityTokenMinting) SetRarity(rarity string) *EnableViaRarityTokenMinting {
	inst.Rarity = &rarity
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *EnableViaRarityTokenMinting) SetOracleAccount(oracle ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *EnableViaRarityTokenMinting) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRarityTokenMintAccount sets the "rarityTokenMint" account.
func (inst *EnableViaRarityTokenMinting) SetRarityTokenMintAccount(rarityTokenMint ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(rarityTokenMint).WRITE()
	return inst
}

// GetRarityTokenMintAccount gets the "rarityTokenMint" account.
func (inst *EnableViaRarityTokenMinting) GetRarityTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *EnableViaRarityTokenMinting) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *EnableViaRarityTokenMinting) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetViaMappingAccount sets the "viaMapping" account.
func (inst *EnableViaRarityTokenMinting) SetViaMappingAccount(viaMapping ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(viaMapping).WRITE()
	return inst
}

// GetViaMappingAccount gets the "viaMapping" account.
func (inst *EnableViaRarityTokenMinting) GetViaMappingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetViaAccount sets the "via" account.
func (inst *EnableViaRarityTokenMinting) SetViaAccount(via ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(via).WRITE()
	return inst
}

// GetViaAccount gets the "via" account.
func (inst *EnableViaRarityTokenMinting) GetViaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetViasAccount sets the "vias" account.
func (inst *EnableViaRarityTokenMinting) SetViasAccount(vias ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(vias).WRITE()
	return inst
}

// GetViasAccount gets the "vias" account.
func (inst *EnableViaRarityTokenMinting) GetViasAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *EnableViaRarityTokenMinting) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *EnableViaRarityTokenMinting) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst EnableViaRarityTokenMinting) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_EnableViaRarityTokenMinting,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst EnableViaRarityTokenMinting) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *EnableViaRarityTokenMinting) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Rarity == nil {
			return errors.New("Rarity parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RarityTokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ViaMapping is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Via is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Vias is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *EnableViaRarityTokenMinting) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("EnableViaRarityTokenMinting")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Rarity", *inst.Rarity))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("  rarityTokenMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       viaMapping", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              via", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("             vias", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj EnableViaRarityTokenMinting) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Rarity` param:
	err = encoder.Encode(obj.Rarity)
	if err != nil {
		return err
	}
	return nil
}
func (obj *EnableViaRarityTokenMinting) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Rarity`:
	err = decoder.Decode(&obj.Rarity)
	if err != nil {
		return err
	}
	return nil
}

// NewEnableViaRarityTokenMintingInstruction declares a new EnableViaRarityTokenMinting instruction with the provided parameters and accounts.
func NewEnableViaRarityTokenMintingInstruction(
	// Parameters:
	rarity string,
	// Accounts:
	oracle ag_solanago.PublicKey,
	rarityTokenMint ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey,
	viaMapping ag_solanago.PublicKey,
	via ag_solanago.PublicKey,
	vias ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *EnableViaRarityTokenMinting {
	return NewEnableViaRarityTokenMintingInstructionBuilder().
		SetRarity(rarity).
		SetOracleAccount(oracle).
		SetRarityTokenMintAccount(rarityTokenMint).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetViaMappingAccount(viaMapping).
		SetViaAccount(via).
		SetViasAccount(vias).
		SetSystemProgramAccount(systemProgram)
}
