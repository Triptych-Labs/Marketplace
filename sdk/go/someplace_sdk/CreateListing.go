// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateListing is the `createListing` instruction.
type CreateListing struct {
	ConfigIndex    *uint64
	Price          *uint64
	LifecycleStart *uint64

	// [0] = [WRITE] batch
	//
	// [1] = [WRITE, SIGNER] oracle
	//
	// [2] = [WRITE] listing
	//
	// [3] = [] treasuryAuthority
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateListingInstructionBuilder creates a new `CreateListing` instruction builder.
func NewCreateListingInstructionBuilder() *CreateListing {
	nd := &CreateListing{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetConfigIndex sets the "configIndex" parameter.
func (inst *CreateListing) SetConfigIndex(configIndex uint64) *CreateListing {
	inst.ConfigIndex = &configIndex
	return inst
}

// SetPrice sets the "price" parameter.
func (inst *CreateListing) SetPrice(price uint64) *CreateListing {
	inst.Price = &price
	return inst
}

// SetLifecycleStart sets the "lifecycleStart" parameter.
func (inst *CreateListing) SetLifecycleStart(lifecycleStart uint64) *CreateListing {
	inst.LifecycleStart = &lifecycleStart
	return inst
}

// SetBatchAccount sets the "batch" account.
func (inst *CreateListing) SetBatchAccount(batch ag_solanago.PublicKey) *CreateListing {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(batch).WRITE()
	return inst
}

// GetBatchAccount gets the "batch" account.
func (inst *CreateListing) GetBatchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *CreateListing) SetOracleAccount(oracle ag_solanago.PublicKey) *CreateListing {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *CreateListing) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetListingAccount sets the "listing" account.
func (inst *CreateListing) SetListingAccount(listing ag_solanago.PublicKey) *CreateListing {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(listing).WRITE()
	return inst
}

// GetListingAccount gets the "listing" account.
func (inst *CreateListing) GetListingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *CreateListing) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *CreateListing {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(treasuryAuthority)
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *CreateListing) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateListing) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateListing {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateListing) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CreateListing) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateListing,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateListing) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateListing) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.ConfigIndex == nil {
			return errors.New("ConfigIndex parameter is not set")
		}
		if inst.Price == nil {
			return errors.New("Price parameter is not set")
		}
		if inst.LifecycleStart == nil {
			return errors.New("LifecycleStart parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Batch is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Listing is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateListing) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateListing")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   ConfigIndex", *inst.ConfigIndex))
						paramsBranch.Child(ag_format.Param("         Price", *inst.Price))
						paramsBranch.Child(ag_format.Param("LifecycleStart", *inst.LifecycleStart))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            batch", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          listing", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CreateListing) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfigIndex` param:
	err = encoder.Encode(obj.ConfigIndex)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `LifecycleStart` param:
	err = encoder.Encode(obj.LifecycleStart)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateListing) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfigIndex`:
	err = decoder.Decode(&obj.ConfigIndex)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `LifecycleStart`:
	err = decoder.Decode(&obj.LifecycleStart)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateListingInstruction declares a new CreateListing instruction with the provided parameters and accounts.
func NewCreateListingInstruction(
	// Parameters:
	configIndex uint64,
	price uint64,
	lifecycleStart uint64,
	// Accounts:
	batch ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	listing ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateListing {
	return NewCreateListingInstructionBuilder().
		SetConfigIndex(configIndex).
		SetPrice(price).
		SetLifecycleStart(lifecycleStart).
		SetBatchAccount(batch).
		SetOracleAccount(oracle).
		SetListingAccount(listing).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetSystemProgramAccount(systemProgram)
}
