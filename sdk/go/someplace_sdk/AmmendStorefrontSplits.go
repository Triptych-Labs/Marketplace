// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AmmendStorefrontSplits is the `ammendStorefrontSplits` instruction.
type AmmendStorefrontSplits struct {
	StorefrontSplits *[]Split

	// [0] = [WRITE, SIGNER] oracle
	//
	// [1] = [WRITE] treasuryAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAmmendStorefrontSplitsInstructionBuilder creates a new `AmmendStorefrontSplits` instruction builder.
func NewAmmendStorefrontSplitsInstructionBuilder() *AmmendStorefrontSplits {
	nd := &AmmendStorefrontSplits{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetStorefrontSplits sets the "storefrontSplits" parameter.
func (inst *AmmendStorefrontSplits) SetStorefrontSplits(storefrontSplits []Split) *AmmendStorefrontSplits {
	inst.StorefrontSplits = &storefrontSplits
	return inst
}

// SetOracleAccount sets the "oracle" account.
func (inst *AmmendStorefrontSplits) SetOracleAccount(oracle ag_solanago.PublicKey) *AmmendStorefrontSplits {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *AmmendStorefrontSplits) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *AmmendStorefrontSplits) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *AmmendStorefrontSplits {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *AmmendStorefrontSplits) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst AmmendStorefrontSplits) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AmmendStorefrontSplits,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AmmendStorefrontSplits) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AmmendStorefrontSplits) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.StorefrontSplits == nil {
			return errors.New("StorefrontSplits parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
	}
	return nil
}

func (inst *AmmendStorefrontSplits) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AmmendStorefrontSplits")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("StorefrontSplits", *inst.StorefrontSplits))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj AmmendStorefrontSplits) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `StorefrontSplits` param:
	err = encoder.Encode(obj.StorefrontSplits)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AmmendStorefrontSplits) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `StorefrontSplits`:
	err = decoder.Decode(&obj.StorefrontSplits)
	if err != nil {
		return err
	}
	return nil
}

// NewAmmendStorefrontSplitsInstruction declares a new AmmendStorefrontSplits instruction with the provided parameters and accounts.
func NewAmmendStorefrontSplitsInstruction(
	// Parameters:
	storefrontSplits []Split,
	// Accounts:
	oracle ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey) *AmmendStorefrontSplits {
	return NewAmmendStorefrontSplitsInstructionBuilder().
		SetStorefrontSplits(storefrontSplits).
		SetOracleAccount(oracle).
		SetTreasuryAuthorityAccount(treasuryAuthority)
}
