// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintNftVia is the `mintNftVia` instruction.
type MintNftVia struct {
	CreatorBump *uint8

	// [0] = [WRITE] listing
	//
	// [1] = [WRITE] mintHash
	//
	// [2] = [WRITE] candyMachine
	//
	// [3] = [] candyMachineCreator
	//
	// [4] = [WRITE, SIGNER] payer
	//
	// [5] = [WRITE] oracle
	//
	// [6] = [WRITE] metadata
	//
	// [7] = [WRITE] mint
	//
	// [8] = [WRITE, SIGNER] mintAta
	//
	// [9] = [WRITE] masterEdition
	//
	// [10] = [] tokenMetadataProgram
	//
	// [11] = [] tokenProgram
	//
	// [12] = [] systemProgram
	//
	// [13] = [] rent
	//
	// [14] = [] clock
	//
	// [15] = [] instructionSysvarAccount
	//
	// [16] = [WRITE] treasuryAuthority
	//
	// [17] = [WRITE] initializerTokenAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintNftViaInstructionBuilder creates a new `MintNftVia` instruction builder.
func NewMintNftViaInstructionBuilder() *MintNftVia {
	nd := &MintNftVia{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 18),
	}
	return nd
}

// SetCreatorBump sets the "creatorBump" parameter.
func (inst *MintNftVia) SetCreatorBump(creatorBump uint8) *MintNftVia {
	inst.CreatorBump = &creatorBump
	return inst
}

// SetListingAccount sets the "listing" account.
func (inst *MintNftVia) SetListingAccount(listing ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(listing).WRITE()
	return inst
}

// GetListingAccount gets the "listing" account.
func (inst *MintNftVia) GetListingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintHashAccount sets the "mintHash" account.
func (inst *MintNftVia) SetMintHashAccount(mintHash ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mintHash).WRITE()
	return inst
}

// GetMintHashAccount gets the "mintHash" account.
func (inst *MintNftVia) GetMintHashAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCandyMachineAccount sets the "candyMachine" account.
func (inst *MintNftVia) SetCandyMachineAccount(candyMachine ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(candyMachine).WRITE()
	return inst
}

// GetCandyMachineAccount gets the "candyMachine" account.
func (inst *MintNftVia) GetCandyMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetCandyMachineCreatorAccount sets the "candyMachineCreator" account.
func (inst *MintNftVia) SetCandyMachineCreatorAccount(candyMachineCreator ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(candyMachineCreator)
	return inst
}

// GetCandyMachineCreatorAccount gets the "candyMachineCreator" account.
func (inst *MintNftVia) GetCandyMachineCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintNftVia) SetPayerAccount(payer ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintNftVia) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetOracleAccount sets the "oracle" account.
func (inst *MintNftVia) SetOracleAccount(oracle ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *MintNftVia) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *MintNftVia) SetMetadataAccount(metadata ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *MintNftVia) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMintAccount sets the "mint" account.
func (inst *MintNftVia) SetMintAccount(mint ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *MintNftVia) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMintAtaAccount sets the "mintAta" account.
func (inst *MintNftVia) SetMintAtaAccount(mintAta ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(mintAta).WRITE().SIGNER()
	return inst
}

// GetMintAtaAccount gets the "mintAta" account.
func (inst *MintNftVia) GetMintAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *MintNftVia) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *MintNftVia) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintNftVia) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintNftVia) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintNftVia) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintNftVia) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintNftVia) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintNftVia) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *MintNftVia) SetRentAccount(rent ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintNftVia) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetClockAccount sets the "clock" account.
func (inst *MintNftVia) SetClockAccount(clock ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(clock)
	return inst
}

// GetClockAccount gets the "clock" account.
func (inst *MintNftVia) GetClockAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetInstructionSysvarAccountAccount sets the "instructionSysvarAccount" account.
func (inst *MintNftVia) SetInstructionSysvarAccountAccount(instructionSysvarAccount ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(instructionSysvarAccount)
	return inst
}

// GetInstructionSysvarAccountAccount gets the "instructionSysvarAccount" account.
func (inst *MintNftVia) GetInstructionSysvarAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *MintNftVia) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[16] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *MintNftVia) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(16)
}

// SetInitializerTokenAccountAccount sets the "initializerTokenAccount" account.
func (inst *MintNftVia) SetInitializerTokenAccountAccount(initializerTokenAccount ag_solanago.PublicKey) *MintNftVia {
	inst.AccountMetaSlice[17] = ag_solanago.Meta(initializerTokenAccount).WRITE()
	return inst
}

// GetInitializerTokenAccountAccount gets the "initializerTokenAccount" account.
func (inst *MintNftVia) GetInitializerTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(17)
}

func (inst MintNftVia) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintNftVia,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintNftVia) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintNftVia) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CreatorBump == nil {
			return errors.New("CreatorBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Listing is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MintHash is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.CandyMachine is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.CandyMachineCreator is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MintAta is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.Clock is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.InstructionSysvarAccount is not set")
		}
		if inst.AccountMetaSlice[16] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[17] == nil {
			return errors.New("accounts.InitializerTokenAccount is not set")
		}
	}
	return nil
}

func (inst *MintNftVia) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintNftVia")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CreatorBump", *inst.CreatorBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=18]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("             listing", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            mintHash", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("        candyMachine", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta(" candyMachineCreator", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("               payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              oracle", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            metadata", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             mintAta", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("       masterEdition", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("tokenMetadataProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("        tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("       systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                rent", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("               clock", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("   instructionSysvar", inst.AccountMetaSlice.Get(15)))
						accountsBranch.Child(ag_format.Meta("   treasuryAuthority", inst.AccountMetaSlice.Get(16)))
						accountsBranch.Child(ag_format.Meta("    initializerToken", inst.AccountMetaSlice.Get(17)))
					})
				})
		})
}

func (obj MintNftVia) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreatorBump` param:
	err = encoder.Encode(obj.CreatorBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintNftVia) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreatorBump`:
	err = decoder.Decode(&obj.CreatorBump)
	if err != nil {
		return err
	}
	return nil
}

// NewMintNftViaInstruction declares a new MintNftVia instruction with the provided parameters and accounts.
func NewMintNftViaInstruction(
	// Parameters:
	creatorBump uint8,
	// Accounts:
	listing ag_solanago.PublicKey,
	mintHash ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	candyMachineCreator ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	mintAta ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	clock ag_solanago.PublicKey,
	instructionSysvarAccount ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey,
	initializerTokenAccount ag_solanago.PublicKey) *MintNftVia {
	return NewMintNftViaInstructionBuilder().
		SetCreatorBump(creatorBump).
		SetListingAccount(listing).
		SetMintHashAccount(mintHash).
		SetCandyMachineAccount(candyMachine).
		SetCandyMachineCreatorAccount(candyMachineCreator).
		SetPayerAccount(payer).
		SetOracleAccount(oracle).
		SetMetadataAccount(metadata).
		SetMintAccount(mint).
		SetMintAtaAccount(mintAta).
		SetMasterEditionAccount(masterEdition).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetClockAccount(clock).
		SetInstructionSysvarAccountAccount(instructionSysvarAccount).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetInitializerTokenAccountAccount(initializerTokenAccount)
}
