// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddWhitelistedCm is the `addWhitelistedCm` instruction.
type AddWhitelistedCm struct {
	CandyMachineCreator *ag_solanago.PublicKey
	CandyMachine        *ag_solanago.PublicKey

	// [0] = [WRITE] treasuryWhitelist
	//
	// [1] = [WRITE, SIGNER] oracle
	//
	// [2] = [WRITE] treasuryAuthority
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddWhitelistedCmInstructionBuilder creates a new `AddWhitelistedCm` instruction builder.
func NewAddWhitelistedCmInstructionBuilder() *AddWhitelistedCm {
	nd := &AddWhitelistedCm{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetCandyMachineCreator sets the "candyMachineCreator" parameter.
func (inst *AddWhitelistedCm) SetCandyMachineCreator(candyMachineCreator ag_solanago.PublicKey) *AddWhitelistedCm {
	inst.CandyMachineCreator = &candyMachineCreator
	return inst
}

// SetCandyMachine sets the "candyMachine" parameter.
func (inst *AddWhitelistedCm) SetCandyMachine(candyMachine ag_solanago.PublicKey) *AddWhitelistedCm {
	inst.CandyMachine = &candyMachine
	return inst
}

// SetTreasuryWhitelistAccount sets the "treasuryWhitelist" account.
func (inst *AddWhitelistedCm) SetTreasuryWhitelistAccount(treasuryWhitelist ag_solanago.PublicKey) *AddWhitelistedCm {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treasuryWhitelist).WRITE()
	return inst
}

// GetTreasuryWhitelistAccount gets the "treasuryWhitelist" account.
func (inst *AddWhitelistedCm) GetTreasuryWhitelistAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOracleAccount sets the "oracle" account.
func (inst *AddWhitelistedCm) SetOracleAccount(oracle ag_solanago.PublicKey) *AddWhitelistedCm {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *AddWhitelistedCm) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *AddWhitelistedCm) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *AddWhitelistedCm {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *AddWhitelistedCm) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddWhitelistedCm) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddWhitelistedCm {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddWhitelistedCm) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst AddWhitelistedCm) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddWhitelistedCm,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddWhitelistedCm) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddWhitelistedCm) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CandyMachineCreator == nil {
			return errors.New("CandyMachineCreator parameter is not set")
		}
		if inst.CandyMachine == nil {
			return errors.New("CandyMachine parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreasuryWhitelist is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddWhitelistedCm) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddWhitelistedCm")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CandyMachineCreator", *inst.CandyMachineCreator))
						paramsBranch.Child(ag_format.Param("       CandyMachine", *inst.CandyMachine))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("treasuryWhitelist", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AddWhitelistedCm) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CandyMachineCreator` param:
	err = encoder.Encode(obj.CandyMachineCreator)
	if err != nil {
		return err
	}
	// Serialize `CandyMachine` param:
	err = encoder.Encode(obj.CandyMachine)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddWhitelistedCm) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CandyMachineCreator`:
	err = decoder.Decode(&obj.CandyMachineCreator)
	if err != nil {
		return err
	}
	// Deserialize `CandyMachine`:
	err = decoder.Decode(&obj.CandyMachine)
	if err != nil {
		return err
	}
	return nil
}

// NewAddWhitelistedCmInstruction declares a new AddWhitelistedCm instruction with the provided parameters and accounts.
func NewAddWhitelistedCmInstruction(
	// Parameters:
	candyMachineCreator ag_solanago.PublicKey,
	candyMachine ag_solanago.PublicKey,
	// Accounts:
	treasuryWhitelist ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddWhitelistedCm {
	return NewAddWhitelistedCmInstructionBuilder().
		SetCandyMachineCreator(candyMachineCreator).
		SetCandyMachine(candyMachine).
		SetTreasuryWhitelistAccount(treasuryWhitelist).
		SetOracleAccount(oracle).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetSystemProgramAccount(systemProgram)
}
