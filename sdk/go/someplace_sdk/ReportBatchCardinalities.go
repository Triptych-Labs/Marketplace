// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReportBatchCardinalities is the `reportBatchCardinalities` instruction.
type ReportBatchCardinalities struct {
	CardinalitiesIndices *[][]uint64
	CardinalitiesKeys    *[]string

	// [0] = [WRITE] batchCardinalitiesReport
	//
	// [1] = [] batch
	//
	// [2] = [WRITE, SIGNER] oracle
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewReportBatchCardinalitiesInstructionBuilder creates a new `ReportBatchCardinalities` instruction builder.
func NewReportBatchCardinalitiesInstructionBuilder() *ReportBatchCardinalities {
	nd := &ReportBatchCardinalities{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetCardinalitiesIndices sets the "cardinalitiesIndices" parameter.
func (inst *ReportBatchCardinalities) SetCardinalitiesIndices(cardinalitiesIndices [][]uint64) *ReportBatchCardinalities {
	inst.CardinalitiesIndices = &cardinalitiesIndices
	return inst
}

// SetCardinalitiesKeys sets the "cardinalitiesKeys" parameter.
func (inst *ReportBatchCardinalities) SetCardinalitiesKeys(cardinalitiesKeys []string) *ReportBatchCardinalities {
	inst.CardinalitiesKeys = &cardinalitiesKeys
	return inst
}

// SetBatchCardinalitiesReportAccount sets the "batchCardinalitiesReport" account.
func (inst *ReportBatchCardinalities) SetBatchCardinalitiesReportAccount(batchCardinalitiesReport ag_solanago.PublicKey) *ReportBatchCardinalities {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(batchCardinalitiesReport).WRITE()
	return inst
}

// GetBatchCardinalitiesReportAccount gets the "batchCardinalitiesReport" account.
func (inst *ReportBatchCardinalities) GetBatchCardinalitiesReportAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBatchAccount sets the "batch" account.
func (inst *ReportBatchCardinalities) SetBatchAccount(batch ag_solanago.PublicKey) *ReportBatchCardinalities {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(batch)
	return inst
}

// GetBatchAccount gets the "batch" account.
func (inst *ReportBatchCardinalities) GetBatchAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleAccount sets the "oracle" account.
func (inst *ReportBatchCardinalities) SetOracleAccount(oracle ag_solanago.PublicKey) *ReportBatchCardinalities {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *ReportBatchCardinalities) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReportBatchCardinalities) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReportBatchCardinalities {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReportBatchCardinalities) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst ReportBatchCardinalities) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReportBatchCardinalities,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReportBatchCardinalities) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReportBatchCardinalities) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CardinalitiesIndices == nil {
			return errors.New("CardinalitiesIndices parameter is not set")
		}
		if inst.CardinalitiesKeys == nil {
			return errors.New("CardinalitiesKeys parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BatchCardinalitiesReport is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Batch is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ReportBatchCardinalities) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReportBatchCardinalities")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CardinalitiesIndices", *inst.CardinalitiesIndices))
						paramsBranch.Child(ag_format.Param("   CardinalitiesKeys", *inst.CardinalitiesKeys))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("batchCardinalitiesReport", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   batch", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                  oracle", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("           systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ReportBatchCardinalities) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CardinalitiesIndices` param:
	err = encoder.Encode(obj.CardinalitiesIndices)
	if err != nil {
		return err
	}
	// Serialize `CardinalitiesKeys` param:
	err = encoder.Encode(obj.CardinalitiesKeys)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReportBatchCardinalities) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CardinalitiesIndices`:
	err = decoder.Decode(&obj.CardinalitiesIndices)
	if err != nil {
		return err
	}
	// Deserialize `CardinalitiesKeys`:
	err = decoder.Decode(&obj.CardinalitiesKeys)
	if err != nil {
		return err
	}
	return nil
}

// NewReportBatchCardinalitiesInstruction declares a new ReportBatchCardinalities instruction with the provided parameters and accounts.
func NewReportBatchCardinalitiesInstruction(
	// Parameters:
	cardinalitiesIndices [][]uint64,
	cardinalitiesKeys []string,
	// Accounts:
	batchCardinalitiesReport ag_solanago.PublicKey,
	batch ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ReportBatchCardinalities {
	return NewReportBatchCardinalitiesInstructionBuilder().
		SetCardinalitiesIndices(cardinalitiesIndices).
		SetCardinalitiesKeys(cardinalitiesKeys).
		SetBatchCardinalitiesReportAccount(batchCardinalitiesReport).
		SetBatchAccount(batch).
		SetOracleAccount(oracle).
		SetSystemProgramAccount(systemProgram)
}
