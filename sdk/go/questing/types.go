// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Reward struct {
	MintAddress  ag_solanago.PublicKey
	RngThreshold *uint8 `bin:"optional"`
	Amount       uint8
}

func (obj Reward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `RngThreshold` param (optional):
	{
		if obj.RngThreshold == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RngThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Reward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `RngThreshold` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RngThreshold)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type Tender struct {
	MintAddress ag_solanago.PublicKey
	Amount      uint64
}

func (obj Tender) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintAddress` param:
	err = encoder.Encode(obj.MintAddress)
	if err != nil {
		return err
	}
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Tender) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintAddress`:
	err = decoder.Decode(&obj.MintAddress)
	if err != nil {
		return err
	}
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

type QuestError ag_binary.BorshEnum

const (
	QuestErrorUnexpectedQuestingState QuestError = iota
	QuestErrorInvalidInitializer
	QuestErrorIsTimelocked
	QuestErrorNumericalOverflowError
	QuestErrorIndexGreaterThanLength
	QuestErrorCannotFindUsableConfigLine
	QuestErrorUuidMustBeExactly6Length
	QuestErrorInvalidString
)

func (value QuestError) String() string {
	switch value {
	case QuestErrorUnexpectedQuestingState:
		return "UnexpectedQuestingState"
	case QuestErrorInvalidInitializer:
		return "InvalidInitializer"
	case QuestErrorIsTimelocked:
		return "IsTimelocked"
	case QuestErrorNumericalOverflowError:
		return "NumericalOverflowError"
	case QuestErrorIndexGreaterThanLength:
		return "IndexGreaterThanLength"
	case QuestErrorCannotFindUsableConfigLine:
		return "CannotFindUsableConfigLine"
	case QuestErrorUuidMustBeExactly6Length:
		return "UuidMustBeExactly6Length"
	case QuestErrorInvalidString:
		return "InvalidString"
	default:
		return ""
	}
}
