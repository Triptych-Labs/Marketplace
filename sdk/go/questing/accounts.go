// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package questing

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type QuestAccount struct {
	StartTime          int64
	EndTime            int64
	DepositTokenAmount ag_solanago.PublicKey
	Initializer        ag_solanago.PublicKey
}

var QuestAccountDiscriminator = [8]byte{150, 179, 23, 90, 199, 60, 121, 92}

func (obj QuestAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(QuestAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `EndTime` param:
	err = encoder.Encode(obj.EndTime)
	if err != nil {
		return err
	}
	// Serialize `DepositTokenAmount` param:
	err = encoder.Encode(obj.DepositTokenAmount)
	if err != nil {
		return err
	}
	// Serialize `Initializer` param:
	err = encoder.Encode(obj.Initializer)
	if err != nil {
		return err
	}
	return nil
}

func (obj *QuestAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(QuestAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[150 179 23 90 199 60 121 92]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `EndTime`:
	err = decoder.Decode(&obj.EndTime)
	if err != nil {
		return err
	}
	// Deserialize `DepositTokenAmount`:
	err = decoder.Decode(&obj.DepositTokenAmount)
	if err != nil {
		return err
	}
	// Deserialize `Initializer`:
	err = decoder.Decode(&obj.Initializer)
	if err != nil {
		return err
	}
	return nil
}

type Quests struct {
	Oracle ag_solanago.PublicKey
	Quests uint64
}

var QuestsDiscriminator = [8]byte{126, 222, 157, 18, 210, 20, 186, 78}

func (obj Quests) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(QuestsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `Quests` param:
	err = encoder.Encode(obj.Quests)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Quests) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(QuestsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[126 222 157 18 210 20 186 78]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `Quests`:
	err = decoder.Decode(&obj.Quests)
	if err != nil {
		return err
	}
	return nil
}

type Quest struct {
	Index           uint64
	Duration        int64
	Oracle          ag_solanago.PublicKey
	WlCandyMachines []ag_solanago.PublicKey
	Entitlement     *Reward `bin:"optional"`
	Rewards         []Reward
	Tender          *Tender `bin:"optional"`
}

var QuestDiscriminator = [8]byte{68, 78, 51, 23, 204, 27, 76, 132}

func (obj Quest) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(QuestDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Duration` param:
	err = encoder.Encode(obj.Duration)
	if err != nil {
		return err
	}
	// Serialize `Oracle` param:
	err = encoder.Encode(obj.Oracle)
	if err != nil {
		return err
	}
	// Serialize `WlCandyMachines` param:
	err = encoder.Encode(obj.WlCandyMachines)
	if err != nil {
		return err
	}
	// Serialize `Entitlement` param (optional):
	{
		if obj.Entitlement == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Entitlement)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `Rewards` param:
	err = encoder.Encode(obj.Rewards)
	if err != nil {
		return err
	}
	// Serialize `Tender` param (optional):
	{
		if obj.Tender == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Tender)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *Quest) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(QuestDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[68 78 51 23 204 27 76 132]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Duration`:
	err = decoder.Decode(&obj.Duration)
	if err != nil {
		return err
	}
	// Deserialize `Oracle`:
	err = decoder.Decode(&obj.Oracle)
	if err != nil {
		return err
	}
	// Deserialize `WlCandyMachines`:
	err = decoder.Decode(&obj.WlCandyMachines)
	if err != nil {
		return err
	}
	// Deserialize `Entitlement` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Entitlement)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `Rewards`:
	err = decoder.Decode(&obj.Rewards)
	if err != nil {
		return err
	}
	// Deserialize `Tender` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Tender)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type Questor struct {
	Initializer ag_solanago.PublicKey
	Quests      uint64
}

var QuestorDiscriminator = [8]byte{103, 165, 162, 230, 97, 74, 133, 76}

func (obj Questor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(QuestorDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Initializer` param:
	err = encoder.Encode(obj.Initializer)
	if err != nil {
		return err
	}
	// Serialize `Quests` param:
	err = encoder.Encode(obj.Quests)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Questor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(QuestorDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[103 165 162 230 97 74 133 76]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Initializer`:
	err = decoder.Decode(&obj.Initializer)
	if err != nil {
		return err
	}
	// Deserialize `Quests`:
	err = decoder.Decode(&obj.Quests)
	if err != nil {
		return err
	}
	return nil
}
