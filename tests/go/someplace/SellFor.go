// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SellFor is the `sellFor` instruction.
type SellFor struct {
	TreasuryBump *uint8

	// [0] = [WRITE] depoTokenAccount
	//
	// [1] = [WRITE] depoMint
	//
	// [2] = [WRITE] metadata
	//
	// [3] = [WRITE] treasuryTokenAccount
	//
	// [4] = [WRITE] treasuryTokenMint
	//
	// [5] = [WRITE] treasuryAuthority
	//
	// [6] = [WRITE] treasuryWhitelist
	//
	// [7] = [WRITE, SIGNER] initializer
	//
	// [8] = [WRITE] initializerTokenAccount
	//
	// [9] = [] oracle
	//
	// [10] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSellForInstructionBuilder creates a new `SellFor` instruction builder.
func NewSellForInstructionBuilder() *SellFor {
	nd := &SellFor{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetTreasuryBump sets the "treasuryBump" parameter.
func (inst *SellFor) SetTreasuryBump(treasuryBump uint8) *SellFor {
	inst.TreasuryBump = &treasuryBump
	return inst
}

// SetDepoTokenAccountAccount sets the "depoTokenAccount" account.
func (inst *SellFor) SetDepoTokenAccountAccount(depoTokenAccount ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(depoTokenAccount).WRITE()
	return inst
}

// GetDepoTokenAccountAccount gets the "depoTokenAccount" account.
func (inst *SellFor) GetDepoTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetDepoMintAccount sets the "depoMint" account.
func (inst *SellFor) SetDepoMintAccount(depoMint ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(depoMint).WRITE()
	return inst
}

// GetDepoMintAccount gets the "depoMint" account.
func (inst *SellFor) GetDepoMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *SellFor) SetMetadataAccount(metadata ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *SellFor) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTreasuryTokenAccountAccount sets the "treasuryTokenAccount" account.
func (inst *SellFor) SetTreasuryTokenAccountAccount(treasuryTokenAccount ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(treasuryTokenAccount).WRITE()
	return inst
}

// GetTreasuryTokenAccountAccount gets the "treasuryTokenAccount" account.
func (inst *SellFor) GetTreasuryTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTreasuryTokenMintAccount sets the "treasuryTokenMint" account.
func (inst *SellFor) SetTreasuryTokenMintAccount(treasuryTokenMint ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(treasuryTokenMint).WRITE()
	return inst
}

// GetTreasuryTokenMintAccount gets the "treasuryTokenMint" account.
func (inst *SellFor) GetTreasuryTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTreasuryAuthorityAccount sets the "treasuryAuthority" account.
func (inst *SellFor) SetTreasuryAuthorityAccount(treasuryAuthority ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(treasuryAuthority).WRITE()
	return inst
}

// GetTreasuryAuthorityAccount gets the "treasuryAuthority" account.
func (inst *SellFor) GetTreasuryAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTreasuryWhitelistAccount sets the "treasuryWhitelist" account.
func (inst *SellFor) SetTreasuryWhitelistAccount(treasuryWhitelist ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(treasuryWhitelist).WRITE()
	return inst
}

// GetTreasuryWhitelistAccount gets the "treasuryWhitelist" account.
func (inst *SellFor) GetTreasuryWhitelistAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetInitializerAccount sets the "initializer" account.
func (inst *SellFor) SetInitializerAccount(initializer ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *SellFor) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetInitializerTokenAccountAccount sets the "initializerTokenAccount" account.
func (inst *SellFor) SetInitializerTokenAccountAccount(initializerTokenAccount ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(initializerTokenAccount).WRITE()
	return inst
}

// GetInitializerTokenAccountAccount gets the "initializerTokenAccount" account.
func (inst *SellFor) GetInitializerTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOracleAccount sets the "oracle" account.
func (inst *SellFor) SetOracleAccount(oracle ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(oracle)
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *SellFor) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SellFor) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SellFor {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SellFor) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst SellFor) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SellFor,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SellFor) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SellFor) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.TreasuryBump == nil {
			return errors.New("TreasuryBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.DepoTokenAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.DepoMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TreasuryTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TreasuryTokenMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TreasuryAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TreasuryWhitelist is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.InitializerTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SellFor) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SellFor")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("TreasuryBump", *inst.TreasuryBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        depoToken", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("         depoMint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         metadata", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    treasuryToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("treasuryTokenMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("treasuryAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("treasuryWhitelist", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      initializer", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" initializerToken", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("           oracle", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("     tokenProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj SellFor) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `TreasuryBump` param:
	err = encoder.Encode(obj.TreasuryBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SellFor) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `TreasuryBump`:
	err = decoder.Decode(&obj.TreasuryBump)
	if err != nil {
		return err
	}
	return nil
}

// NewSellForInstruction declares a new SellFor instruction with the provided parameters and accounts.
func NewSellForInstruction(
	// Parameters:
	treasuryBump uint8,
	// Accounts:
	depoTokenAccount ag_solanago.PublicKey,
	depoMint ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	treasuryTokenAccount ag_solanago.PublicKey,
	treasuryTokenMint ag_solanago.PublicKey,
	treasuryAuthority ag_solanago.PublicKey,
	treasuryWhitelist ag_solanago.PublicKey,
	initializer ag_solanago.PublicKey,
	initializerTokenAccount ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SellFor {
	return NewSellForInstructionBuilder().
		SetTreasuryBump(treasuryBump).
		SetDepoTokenAccountAccount(depoTokenAccount).
		SetDepoMintAccount(depoMint).
		SetMetadataAccount(metadata).
		SetTreasuryTokenAccountAccount(treasuryTokenAccount).
		SetTreasuryTokenMintAccount(treasuryTokenMint).
		SetTreasuryAuthorityAccount(treasuryAuthority).
		SetTreasuryWhitelistAccount(treasuryWhitelist).
		SetInitializerAccount(initializer).
		SetInitializerTokenAccountAccount(initializerTokenAccount).
		SetOracleAccount(oracle).
		SetTokenProgramAccount(tokenProgram)
}
