// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UnlistMarketListing is the `unlistMarketListing` instruction.
type UnlistMarketListing struct {
	MarketAuthorityBump *uint8

	// [0] = [WRITE] marketAuthority
	//
	// [1] = [WRITE] marketListing
	//
	// [2] = [WRITE] marketListingTokenAccount
	//
	// [3] = [WRITE, SIGNER] seller
	//
	// [4] = [WRITE] nftMint
	//
	// [5] = [WRITE] sellerNftTokenAccount
	//
	// [6] = [WRITE] oracle
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUnlistMarketListingInstructionBuilder creates a new `UnlistMarketListing` instruction builder.
func NewUnlistMarketListingInstructionBuilder() *UnlistMarketListing {
	nd := &UnlistMarketListing{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetMarketAuthorityBump sets the "marketAuthorityBump" parameter.
func (inst *UnlistMarketListing) SetMarketAuthorityBump(marketAuthorityBump uint8) *UnlistMarketListing {
	inst.MarketAuthorityBump = &marketAuthorityBump
	return inst
}

// SetMarketAuthorityAccount sets the "marketAuthority" account.
func (inst *UnlistMarketListing) SetMarketAuthorityAccount(marketAuthority ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marketAuthority).WRITE()
	return inst
}

// GetMarketAuthorityAccount gets the "marketAuthority" account.
func (inst *UnlistMarketListing) GetMarketAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarketListingAccount sets the "marketListing" account.
func (inst *UnlistMarketListing) SetMarketListingAccount(marketListing ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(marketListing).WRITE()
	return inst
}

// GetMarketListingAccount gets the "marketListing" account.
func (inst *UnlistMarketListing) GetMarketListingAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketListingTokenAccountAccount sets the "marketListingTokenAccount" account.
func (inst *UnlistMarketListing) SetMarketListingTokenAccountAccount(marketListingTokenAccount ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(marketListingTokenAccount).WRITE()
	return inst
}

// GetMarketListingTokenAccountAccount gets the "marketListingTokenAccount" account.
func (inst *UnlistMarketListing) GetMarketListingTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSellerAccount sets the "seller" account.
func (inst *UnlistMarketListing) SetSellerAccount(seller ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(seller).WRITE().SIGNER()
	return inst
}

// GetSellerAccount gets the "seller" account.
func (inst *UnlistMarketListing) GetSellerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetNftMintAccount sets the "nftMint" account.
func (inst *UnlistMarketListing) SetNftMintAccount(nftMint ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(nftMint).WRITE()
	return inst
}

// GetNftMintAccount gets the "nftMint" account.
func (inst *UnlistMarketListing) GetNftMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSellerNftTokenAccountAccount sets the "sellerNftTokenAccount" account.
func (inst *UnlistMarketListing) SetSellerNftTokenAccountAccount(sellerNftTokenAccount ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(sellerNftTokenAccount).WRITE()
	return inst
}

// GetSellerNftTokenAccountAccount gets the "sellerNftTokenAccount" account.
func (inst *UnlistMarketListing) GetSellerNftTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetOracleAccount sets the "oracle" account.
func (inst *UnlistMarketListing) SetOracleAccount(oracle ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *UnlistMarketListing) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *UnlistMarketListing) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *UnlistMarketListing {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *UnlistMarketListing) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst UnlistMarketListing) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UnlistMarketListing,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UnlistMarketListing) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UnlistMarketListing) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MarketAuthorityBump == nil {
			return errors.New("MarketAuthorityBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarketAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MarketListing is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MarketListingTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Seller is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.NftMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SellerNftTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *UnlistMarketListing) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UnlistMarketListing")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MarketAuthorityBump", *inst.MarketAuthorityBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   marketAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     marketListing", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("marketListingToken", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("            seller", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           nftMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    sellerNftToken", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            oracle", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj UnlistMarketListing) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MarketAuthorityBump` param:
	err = encoder.Encode(obj.MarketAuthorityBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UnlistMarketListing) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MarketAuthorityBump`:
	err = decoder.Decode(&obj.MarketAuthorityBump)
	if err != nil {
		return err
	}
	return nil
}

// NewUnlistMarketListingInstruction declares a new UnlistMarketListing instruction with the provided parameters and accounts.
func NewUnlistMarketListingInstruction(
	// Parameters:
	marketAuthorityBump uint8,
	// Accounts:
	marketAuthority ag_solanago.PublicKey,
	marketListing ag_solanago.PublicKey,
	marketListingTokenAccount ag_solanago.PublicKey,
	seller ag_solanago.PublicKey,
	nftMint ag_solanago.PublicKey,
	sellerNftTokenAccount ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *UnlistMarketListing {
	return NewUnlistMarketListingInstructionBuilder().
		SetMarketAuthorityBump(marketAuthorityBump).
		SetMarketAuthorityAccount(marketAuthority).
		SetMarketListingAccount(marketListing).
		SetMarketListingTokenAccountAccount(marketListingTokenAccount).
		SetSellerAccount(seller).
		SetNftMintAccount(nftMint).
		SetSellerNftTokenAccountAccount(sellerNftTokenAccount).
		SetOracleAccount(oracle).
		SetTokenProgramAccount(tokenProgram)
}
