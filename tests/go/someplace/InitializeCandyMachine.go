// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package someplace

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeCandyMachine is the `initializeCandyMachine` instruction.
type InitializeCandyMachine struct {
	Data *CandyMachineData
	Name *string

	// [0] = [WRITE] batchAccount
	//
	// [1] = [WRITE] batches
	//
	// [2] = [WRITE] batchReceipt
	//
	// [3] = [WRITE, SIGNER] oracle
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeCandyMachineInstructionBuilder creates a new `InitializeCandyMachine` instruction builder.
func NewInitializeCandyMachineInstructionBuilder() *InitializeCandyMachine {
	nd := &InitializeCandyMachine{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetData sets the "data" parameter.
func (inst *InitializeCandyMachine) SetData(data CandyMachineData) *InitializeCandyMachine {
	inst.Data = &data
	return inst
}

// SetName sets the "name" parameter.
func (inst *InitializeCandyMachine) SetName(name string) *InitializeCandyMachine {
	inst.Name = &name
	return inst
}

// SetBatchAccountAccount sets the "batchAccount" account.
func (inst *InitializeCandyMachine) SetBatchAccountAccount(batchAccount ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(batchAccount).WRITE()
	return inst
}

// GetBatchAccountAccount gets the "batchAccount" account.
func (inst *InitializeCandyMachine) GetBatchAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetBatchesAccount sets the "batches" account.
func (inst *InitializeCandyMachine) SetBatchesAccount(batches ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(batches).WRITE()
	return inst
}

// GetBatchesAccount gets the "batches" account.
func (inst *InitializeCandyMachine) GetBatchesAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBatchReceiptAccount sets the "batchReceipt" account.
func (inst *InitializeCandyMachine) SetBatchReceiptAccount(batchReceipt ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(batchReceipt).WRITE()
	return inst
}

// GetBatchReceiptAccount gets the "batchReceipt" account.
func (inst *InitializeCandyMachine) GetBatchReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOracleAccount sets the "oracle" account.
func (inst *InitializeCandyMachine) SetOracleAccount(oracle ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oracle).WRITE().SIGNER()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *InitializeCandyMachine) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeCandyMachine) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeCandyMachine {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeCandyMachine) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst InitializeCandyMachine) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeCandyMachine,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeCandyMachine) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeCandyMachine) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Data == nil {
			return errors.New("Data parameter is not set")
		}
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.BatchAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Batches is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BatchReceipt is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeCandyMachine) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeCandyMachine")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Data", *inst.Data))
						paramsBranch.Child(ag_format.Param("Name", *inst.Name))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        batch", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      batches", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" batchReceipt", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj InitializeCandyMachine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeCandyMachine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeCandyMachineInstruction declares a new InitializeCandyMachine instruction with the provided parameters and accounts.
func NewInitializeCandyMachineInstruction(
	// Parameters:
	data CandyMachineData,
	name string,
	// Accounts:
	batchAccount ag_solanago.PublicKey,
	batches ag_solanago.PublicKey,
	batchReceipt ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeCandyMachine {
	return NewInitializeCandyMachineInstructionBuilder().
		SetData(data).
		SetName(name).
		SetBatchAccountAccount(batchAccount).
		SetBatchesAccount(batches).
		SetBatchReceiptAccount(batchReceipt).
		SetOracleAccount(oracle).
		SetSystemProgramAccount(systemProgram)
}
